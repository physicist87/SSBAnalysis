#define ssbgen_analysis_cxx

#include <iostream>
#include <sstream>
#include <vector>
#include <stdio.h>
#include <stdlib.h>

#include "TMath.h"
#include "TH2.h"
#include "TStyle.h"
#include "TCanvas.h"

#include "./../interface/ssbgen_analysis.hpp"
#include "./../CommonTools.hpp"

using namespace std;

void ssbgen_analysis::GetVariables()
{
}


void ssbgen_analysis::Loop()
{
   //////////
   if (fChain == 0) return;
   //////////

   //////////
   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   //////////

   ///My variables
   Long64_t __tot_evt = 0;


   ////////////////////////
   /// start event loop ///
   ////////////////////////
   for (Long64_t jentry=0; jentry<nentries;jentry++) 
//   for (Long64_t jentry=0; jentry<10;jentry++) 
   {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0)
      {
         printf("ERROR: Could not load tree!!!\n");
         break;
      }

      nb = fChain->GetEntry(jentry);   nbytes += nb;
       
      if (jentry % 100000 == 0) printf("Event %lld\n", jentry); //%lld supports Long64_t

      __tot_evt++;

      ////////////////////////////////////////
      /// start Main Loop Function and Cut ///
      ////////////////////////////////////////


      std::vector<int> v_mom_1;
      std::vector<int> v_mom_2;
      std::vector<int> v_dou_1;
      std::vector<int> v_dou_2;
      v_mom_1.clear(); 
      v_mom_2.clear(); 
      v_dou_1.clear(); 
      v_dou_2.clear();
      idx_status.clear();
      idx_pdgId.clear();
      idx_mother1.clear();
      idx_mother2.clear();
      idx_doughter1.clear();
      idx_doughter2.clear();


      cout << "geninfor start!!! " << endl;       
      /////////////////////////////
      /// Find Dilepton Channel ///
      /////////////////////////////

      std::vector<int> v_tau_st3;
      v_tau_st3.clear();
      std::vector<int> v_lep_st1;
      v_lep_st1.clear();
      std::vector<int> v_lep_st2;
      v_lep_st2.clear();

      std::vector<int> v_muon_m;
      v_muon_m.clear();
      std::vector<int> v_muon_p;
      v_muon_p.clear();
      std::vector<int> v_bjet_m;
      v_bjet_m.clear();
      std::vector<int> v_bjet_p;
      v_bjet_p.clear();

      num_diele = 0;   
      for (int i = 0; i < GenPar_Status->size(); ++i )
      {
         idx_status[GenPar_Idx->at(i)]    = GenPar_Status->at(i);
         idx_pdgId[GenPar_Idx->at(i)]     = GenPar_pdgId->at(i);
         idx_mother1[GenPar_Idx->at(i)]   = GenPar_Mom1_Idx->at(i);
         idx_mother2[GenPar_Idx->at(i)]   = GenPar_Mom2_Idx->at(i);
         idx_doughter1[GenPar_Idx->at(i)] = GenPar_Dou1_Idx->at(i);
         idx_doughter2[GenPar_Idx->at(i)] = GenPar_Dou2_Idx->at(i);


         if ( GenPar_Status->at(i) == 3 )// for PYTHIA 6
         {

            cout << "map idx           : " << GenPar_Idx->at(i) << endl;
            cout << "map idx_mother1   : " << idx_mother1.find( GenPar_Idx->at(i) )->second << endl;
            cout << "map idx_mother2   : " << idx_mother2.find( GenPar_Idx->at(i) )->second << endl;
            cout << "map idx_doughter1 : " << idx_doughter1.find( GenPar_Idx->at(i) )->second << endl;
            cout << "map idx_doughter2 : " << idx_doughter2.find( GenPar_Idx->at(i) )->second << endl;
            if ( abs( GenPar_pdgId->at(i) ) == 11 )
            {  
//               cout << " i = ?  " << i << endl;
//               cout << " pdgId ?? : " << GenPar_pdgId->at(i) << endl;
//               cout << " pdgindex ?? : " << GenPar_Idx->at(i) << endl;
//               cout << " mom1 pdgId ?? : " << GenPar_Mom1_pdgId->at(i) << endl;
//               cout << " mom2 pdgId ?? : " << GenPar_Mom2_pdgId->at(i) << endl;

               num_diele++;
            }
            if ( abs( GenPar_pdgId->at(i) ) == 15 ) { v_tau_st3.push_back( i ); }

            if (  GenPar_pdgId->at(i)  ==  13 ){ v_muon_m.push_back( i ) ;}
            if (  GenPar_pdgId->at(i)  == -13 ){ v_muon_p.push_back( i ) ;}
            if (  GenPar_pdgId->at(i)  ==  5  ){ v_bjet_m.push_back( i ) ;}
            if (  GenPar_pdgId->at(i)  == -5  ){ v_bjet_p.push_back( i ) ;}
         
         }
         if ( GenPar_Status->at(i) == 1 && (abs( GenPar_pdgId->at(i) ) == 11 || abs( GenPar_pdgId->at(i) ) == 13 || abs( GenPar_pdgId->at(i) ) == 15) ) { v_lep_st1.push_back( GenPar_Idx->at(i) ); }
         
         if ( GenPar_Status->at(i) == 2 ) 
         { 
            if ( abs( GenPar_pdgId->at(i) ) == 11 )
            v_lep_st2.push_back( i );
         }
         
      }
  
      cout << "dkdkdk" << endl;
      for ( std::map<int,int>::iterator it = idx_status.begin(); it != idx_status.end(); ++it )
      {
         cout << "idx : " << it->first << " status :"<< it->second << " m1 : " << idx_mother1.find(it->first)->second << " m2: " << idx_mother2.find(it->first)->second << 
         " d1 : "<< idx_doughter1.find(it->first)->second << " d2 : " << idx_doughter2.find(it->first)->second << endl;
      }

      if ( v_muon_m.size() == 1 && v_muon_p.size() == 1 )
      {
         TLorentzVector * bJet_m = (TLorentzVector*)GenPar->At(v_bjet_m.at(0)); 
         TLorentzVector * bJet_p = (TLorentzVector*)GenPar->At(v_bjet_p.at(0)); 
         TLorentzVector * Mu_m   = (TLorentzVector*)GenPar->At(v_muon_m.at(0)); 
         TLorentzVector * Mu_p   = (TLorentzVector*)GenPar->At(v_muon_p.at(0)); 
         ssbcpviol->getO1Vari( bJet_m ,bJet_p ,Mu_p ,Mu_m );
//         FillHisto( CPO1_gen , ssbcpviol->getO1Vari( bJet_m ,bJet_p ,Mu_p ,Mu_m ) );
         FillHisto( CPO1_gen , ssbcpviol->getO1Vari( bJet_p ,bJet_m ,Mu_p ,Mu_m ) );
      }



//      cout << "map test : " << idx_pdgId.find(GenPar_Idx->at(0) )->second << endl;
      for ( int i = 0 ; i < v_lep_st1.size(); ++i )
      {
/*         cout << "sksksk" << endl;
         cout << "v_lep_st1 test : " << v_lep_st1.at(i) << endl;
         cout << "v_lep pdgId    : " << idx_pdgId.find( v_lep_st1.at(i) )->second << endl;
         cout << "v_lep mom1     : " << idx_mother1.find( v_lep_st1.at(i) )->second << endl;
         cout << "v_lep mom2     : " << idx_mother2.find( v_lep_st1.at(i) )->second << endl;
         cout << "v_lep dou1     : " << idx_doughter1.find( v_lep_st1.at(i) )->second << endl;
         cout << "v_lep dou2     : " << idx_doughter2.find( v_lep_st1.at(i) )->second << endl;*/
         //cout << "mother index  test : " << idx_pdgId.find(MomFinder( v_lep_st1.at(i) ))->second << endl;
      }
      //////////////////////
      /// Fill Histogram ///
      //////////////////////
      FillHisto(Test,v_lep_st2.size());
//      cout << << << endl;
      cout << "Num of lep : " << num_diele << endl; 
   }//event loop
 
   printf("before Met Filter Total processed number of events: %lld\n", __tot_evt);
    
}//end Loop function

void ssbgen_analysis::GetNtupleTotalEvent( unsigned int totevent )// basic frame
{
   NtupletotalEvent = totevent;
}

void ssbgen_analysis::Start()
{
   fout = new TFile(Form("output/%s",outfile),"RECREATE");
   fout->cd("");

   TDirectory *dir = gDirectory;
   dir->cd();

   DeclareHistos();

}

void ssbgen_analysis::DeclareHistos()
{
   Test      = new TH1F(Form("Test"     ), Form("Test"    ), 10,   0.0, 10);
   CPO1_gen  = new TH1F(Form("CPO1_gen" ), Form("CPO1_gen"), 200, -10, 10);
}

void ssbgen_analysis::End()
{
   fout->Write();
   fout->Close();
}

void ssbgen_analysis::SetOutputFileName(char *outname)
{
   outfile = outname;
}

